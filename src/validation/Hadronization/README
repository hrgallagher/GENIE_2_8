
WORK IN PROGRESS !!!!!

This is going to serve a mini-guide on validation/Hadronization.

** GENERAL NOTE(S)

If using centrally installed Genie, it's safer to stick to v2_8_0d because
a) It has a bug fix to correct an issue with the Makefile-related scripts
b) It has all executable binaries in place, including gevgen

** HADRONIZATION VALIDATION AS OF GENIE 2.8

*** Running interactively

**** Generation of Genie samples (input to validation job)

This recipe is a short-cut extracted from $GENIE/src/production/batch/submit_hadronization_validation_mc_jobs.pl

To produce interactively a (single) sample of 20K nu+n events in the energy range 0.5-80.0GeV, 
try to execute the following:
gevgen -n 20000 -e 0.5, 80.0 -p 14 -t 1000000010 -f "1/x" \
       -r <YOUR_RUN_NUMBER> --seed <YOUR_SEED> \
       --cross-sections /path/to/gspl-vA-v2.8.0.xml \
       --event-generation-list HadronizationTest

Note-1: Obviouosly, YOUR_RUN_NUMBER and YOUR_SEED can be any sensible integerer of your choice.
Note-2: -p==projectile, and it can be 14 (nu) or -14 (nubar).
Note-3: -t==target, and it can be 1000000010 (n) or 1000010010 (p).
        Those id's would indicate ions. 
	Presumably, standard PDG id's can also be used (but I haven't tried).
Note-4: gxsl-vA-v2.8.0.xml can be downloaded from http://www.hepforge.org/archive/genie/data/2.8.0/

**** Running validation

To build the validation application $GENIE/src/validation/Hadronization, please type this:
make

To run it, please try this:
./gvld_hadronz_test -g <YOUR_LIST_OF_SAMPLES>.xml -f gif

Here YOUR_LIST_OF_SAMPLES should be in the format similar to this below:
<?xml version="1.0" encoding="ISO-8859-1"?>
<genie_simulation_outputs>
         <model name="GENIE SVN 2.8.0">
                 <evt_file format="ghep"> ./gntp.1.ghep.root </evt_file>
                 <evt_file format="ghep"> ./gntp.2.ghep.root </evt_file>
                 <evt_file format="ghep"> ./gntp.3.ghep.root </evt_file>
                 <evt_file format="ghep"> ./gntp.4.ghep.root </evt_file>
         </model>
</genie_simulation_outputs>

PLEASE NOTE that with the current implementation:
** There MUST be all 4 samples on input (otherwise the job will result in a segfault)
** The order of samples is IMPORTANT and should be as follows:
   1. nu-n
   2. nu-p
   3. nubar-n
   4. nubar-p


The '-f gif' input argument that specify the output format. In particular, it'll make 
the application to produce output plots in the form of GIF images.
If you don't specify this option, the default will a single PS file.
An eps or root formats are also possible.

** STATUS OF DEVELOPMENT 

WORK IN PROGRESS !!!!!!!!!!!!!!!

*** Restructuring - Overview of Components

Currently, the package is under restructuring.

The old classes, HadPlots and HadPlotter, are still here.

The new classes are RunConfig, Analyzer, ExpData, CommonCalc, GenPlotsBase, 
and derived from the later, several plot-specific classes: ChHadW2, NegChHadD,
ChHadDoverMultW2, Pi0W2, Pi0D.
Other plot-specific pieces of code will be ported/added shortly. 

The RunConfig reads the following input config files in the xml(-like) format:
-- an xml config that contains the list of Genie's pre-generated samples
-- an xml config that contains the list of the exp.datasets together with the 
   description of the desired histograms, etc.

The RunConfig also hold a pointer to the ExpData object.

The RunConfig can also control the loop until the configuration is done.
It can command the Analyzer to analyze events based on what sample it's
currently on, and to draw the validation plots.

It's the Analyzer that can loop over Genie's pre-generated events, look at
specific observables, and at the end combine the outcome with exp.data plots.
It's all inside the Analyzer, incl. 

Usage example:
./gvld_hadronz_test -g <YOUR_LIST_OF_SAMPLES>.xml -d <YOUR_LIST_OF_DATASETS> -f gif  

Example of dataset input config is provided with this application: 
example_exp_data_input.xml
The exp.datasets are currently located in the hierarchy of directories under:
$GENIE/data/validation//vA/hadronics
i.e. the location specified in the config is given regards to this general area.
(there maybe alternative ideas, but at the moment the status is as above)

WARNING-2: In the current implementation MC results will only be displayed if 
the system finds a corresponding datasets; otherwise skip.

WARNING-2: The above mentioned example configuration contains a very limited list
of experimental datasets. Addition of other datasets is in progress.

*** Regression Testing

Current machinery allows to process outputs from different models (versions) of Genie.
Results will be grouped by interaction type (projectile+target) and by observables.
Results for the same combo projectile+target+observable, obtained from different Genie models,
will be displyed collectively on the same plot/canvs.

Example Genie input configuration may look like this:
<genie_simulation_outputs>
         <model name="GENIE v1">
                 <evt_file format="ghep"> ./v1/gntp.1.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v1/gntp.2.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v1/gntp.3.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v1/gntp.4.ghep.root </evt_file>
         </model>
         <model name="GENIE v2">
                 <evt_file format="ghep"> ./v2/gntp.1.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v2/gntp.2.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v2/gntp.3.ghep.root </evt_file>
                 <evt_file format="ghep"> ./v2/gntp.4.ghep.root </evt_file>
         </model>
</genie_simulation_outputs>


*** Preliminary instructions for adding/porting analzer/plotter for particular observables

Our current design phylosophy on the analysis/plotting components is the following:
We propose to have a compact base class for an analyzer that will serve mainly as as API,
and a family of compact analyzers/plotters dedicated to specific physics observables.

Such approach will enhance the modularity and will simplify maintenance of the package.

There's also a class (singleton) CommonCalc that handles variables and calculations of
common use to a variety of other plotters.

This approach has been initially prototyped, and is currently represented by the two new classes: 
-- GenPlotsBase - base class for a analyzer/plotter 
-- ChHadW2 - analyzer to study multiplicity of charged hadrons as a function of W2 
-- NegChHadD
-- ChHadDoverMultW2 
-- Pi0W2
-- Pi0D

The essential feature of the GenPlotBase object and all of the derived objects is ** NAME **.
The name will reflect what physics variable/observable is being studied.
In the current implementation, this name will be needed to MATCH the name specified with an experimental 
dataset or a group of datasets (in the input xml config file). This is how the simulated observable 
will be matched vs exp.data.
(There maybe other design ideas down the road, but this is the status as of April 25, 2014).

ChHadW2 implements analysis of charged hadrons multiplicity as a function of W2.
Specifically, it sets the analyzer's name to "ChHad_W2" (see also example_exp_data_input.xml
for labeling exp.dataset(s)), as well as provide implementation of (purely) virtual methods
AnalyzeEvent( const EventRecord& ) and EndOfEventLoopPlots().
Please note that it make a use of CommonCalc object, to access several common-use variables.
 
Implementation details of ChHadW2 is largely influenced and driven by the corresponding portion 
of the original version of HadPlots (as of Genie v2.8).
 
Other contents of HadPlots (code releted to specific variables/observables) can be ported by
following the pattern of GenPlotsBase and ChHadW2.

Currently ported are NegChHadD, ChHadDoverMultW2, Pi0W2, Pi0D.
The implementation followed the same approach as for ChHadW2, while it's also influenced by 
the original HadPlots. 
 




 
